#!/bin/bash
apt install net-tools -y
apt install ssh -y
timedatectl set-timezone "Asia/Shanghai"
apt install gcc -y
apt install openssl -y
apt install libssl-dev -y
apt install make
wget https://github.com/dun/munge/archive/munge-0.5.13.tar.gz
tar -zxf munge-0.5.13.tar.gz
cd munge-munge-0.5.13
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var && make && make install
#dd if=/dev/urandom bs=1 count=1024 >/etc/munge/munge.key
useradd munge -m -s /bin/bash
echo "输入munge密码:"
passwd munge
chown -R munge.munge /var/{lib,log,run}/munge
chown -R munge.munge /etc/munge
chmod 711 /var/lib/munge
chmod 700 /var/log/munge
chmod 755 /var/run/munge
chmod 700 /etc/munge
#/etc/init.d/munge start
cd /home
wget https://download.schedmd.com/slurm/slurm-19.05.0.tar.bz2
tar -xaf slurm*tar.bz2
cd slurm-19.05.0
ln -s /usr/bin/python3 /usr/bin/python
./configure --enable-debug --prefix=/opt/slurm --sysconfdir=/opt/slurm/etc
make && make install
useradd slurm -m -s /bin/bash
echo "请输入slurm密码:"
passwd slurm
mkdir /opt/slurm/log
mkdir /opt/slurm/spool
mkdir /opt/slurm/spool/slurm
mkdir /opt/slurm/run
chown -R slurm:slurm /opt/slurm

server=Y
cilent=N
read -p "是否为服务端(Y or N):" flag
if [ $flag == $server ]
then
   read -p "请输入控制节点名称:" serverName
   read -p "请输入控制节点IP:" serverIP
   read -p "请输入控制节点核心数:" serverCore
   
   declare -a computeName
   declare -i computeNumber
   declare -a computeCore
   
   read -p "请输入计算节点数量:" computeNumber
   
   for (( i=0; i<$computeNumber; i=i+1 )); do
       read -p "请输入计算节点名称 核心数 IP地址(以空格隔开):" name core  IP_node 
       echo "$IP_node	$name" >> /etc/hosts
       computeName[$i]=$name
       computeCore[$i]=$core
       echo "节点名称:${computeName[$i]}  节点核心数:${computeCore[$i]}" 
   done
    
   for (( i=0; i<$computeNumber; i=i+1 )); do
      echo ${computeName[$i]} ${computeCore[$i]} >> out.txt
   done
   cp -r /home/slurm-19.05.0/etc/ /opt/slurm/etc/
   chown -R slurm:slurm /opt/slurm/etc
   cp /opt/slurm/etc/slurm.conf.example /opt/slurm/etc/slurm.conf 
   rm /opt/slurm/etc/slurm.conf
   touch /opt/slurm/etc/slurm.conf
   echo "# Example slurm.conf file. Please run configurator.html
# (in doc/html) to build a configuration file customized
# for your environment.
#
#
# slurm.conf file generated by configurator.html.
#
# See the slurm.conf man page for more information.
#
ClusterName=linux #集群名称
ControlMachine=$serverName #控制节点名称
ControlAddr=$serverIP #控制节点IP
#BackupController=
#BackupAddr=
#
SlurmUser=slurm
#SlurmdUser=root
SlurmctldPort=6817
SlurmdPort=6818
AuthType=auth/munge
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
StateSaveLocation=/opt/slurm/spool/slurm/ctld
SlurmdSpoolDir=/opt/slurm/spool/slurm/d
SwitchType=switch/none
MpiDefault=none
SlurmctldPidFile=/opt/slurm/run/slurmctld.pid
SlurmdPidFile=/opt/slurm/run/slurmd.pid
ProctrackType=proctrack/pgid
#PluginDir=
#FirstJobId=
ReturnToService=0
#MaxJobCount=
#PlugStackConfig=
#PropagatePrioProcess=
#PropagateResourceLimits=
#PropagateResourceLimitsExcept=
#Prolog=和IP地址
#Epilog=
#SrunProlog=
#SrunEpilog=
#TaskProlog=
#TaskEpilog=
#TaskPlugin=
#TrackWCKey=no
#TreeWidth=50
#TmpFS=
#UsePAM=
#
# TIMERS
SlurmctldTimeout=300
SlurmdTimeout=300
InactiveLimit=0
MinJobAge=300
KillWait=30
Waittime=0
#
# SCHEDULING
SchedulerType=sched/backfill
#SchedulerAuth=
#SelectType=select/linear
SelectType=select/cons_tres #允许分配资源形式 Allocate individual processors, memory, GPUs, and other trackable resources
SelectTypeParameters=CR_Core #以CPU作为分配资源(default) Cores as a consumable resource.
FastSchedule=1
#PriorityType=priority/multifactor
#PriorityDecayHalfLife=14-0
#PriorityUsageResetPeriod=14-0
#PriorityWeightFairshare=100000
#PriorityWeightAge=1000
#PriorityWeightPartition=10000
#PriorityWeightJobSize=1000
#PriorityMaxAge=1-0
#
# LOGGING
SlurmctldDebug=3
SlurmctldLogFile=/opt/slurm/log/slurmctld.log
SlurmdDebug=3
SlurmdLogFile=/opt/slurm/log/slurmd.log
JobCompType=jobcomp/none
#JobCompLoc=
#
# ACCOUNTING
#JobAcctGatherType=jobacct_gather/linux
#JobAcctGatherFrequency=30
#
#AccountingStorageType=accounting_storage/slurmdbd
#AccountingStorageHost=
#AccountingStorageLoc=
#AccountingStoragePass=
#AccountingStorageUser=
#
# COMPUTE NODES
#配置信息填写 在这里可设置节点资源（Procs为核心数）Weight为权重
#NodeName=$serverName Procs=$serverCore State=IDLE Weight=2
#NodeName=node1 Procs=6 State=IDLE Weight=1
#NodeName=node2 Procs=6 State=IDLE Weight=1
#添加节点，直接跟在Nodes就可以
#PartitionName=control Nodes=control Default=Yes MaxTime=INFINITE State=UP
#PartitionName=compute Nodes=node1,control Default=Yes MaxTime=INFINITE State=UP
" >> /opt/slurm/etc/slurm.conf
   echo "NodeName=$serverName Procs=$serverCore State=IDLE Weight=2" >> /opt/slurm/etc/slurm.conf
   for (( i=0; i<$computeNumber; i=i+1 )); do
      echo "NodeName=${computeName[$i]} Procs=${computeCore[$i]} State=IDLE Weight=1" >> /opt/slurm/etc/slurm.conf
   done

   echo "PartitionName=control Nodes=$serverName Default=Yes MaxTime=INFINITE State=UP" >> /opt/slurm/etc/slurm.conf
   echo -n "PartitionName=compute Nodes=" >> /opt/slurm/etc/slurm.conf
   for (( i=0; i<$computeNumber; i=i+1)); do
     echo -n "${computeName[$i]}," >> /opt/slurm/etc/slurm.conf
     
   done
   echo -n "$serverName " >> /opt/slurm/etc/slurm.conf
   echo "Default=Yes MaxTime=INFINITE State=UP" >> /opt/slurm/etc/slurm.conf

   for (( i=0; i<$computeNumber; i=i+1 )); do
      scp -r /opt/slurm/etc slurm@${computeName[$i]}:/opt/slurm/
      scp -r /etc/munge/munge.key munge@${computeName[$i]}:/etc/munge/
   done
   #/opt/slurm/sbin/slurmctld -c
   #/opt/slurm/sbin/slurmd -c
   apt install nfs-kernel-server -y
   mkdir -p /home/share
   chown nobody:nogroup /home/share
   chmod 777 /home/share
   IP=192.168.1.0/24
   read -p "输入NFS服务端接受IP范围(默认192.168.1.0/24):" IP
   echo "/home/share $IP(rw,sync,no_subtree_check)" >> /etc/exports
   exportfs -a
   systemctl restart nfs-kernel-server
   ufw allow from $IP to any port nfs
   echo "#!/bin/bash
#启动munge
/etc/init.d/munge start
#启动slurm集群
/opt/slurm/sbin/slurmctld -c
#启动控制节点slurm
/opt/slurm/sbin/slurmd -c
   " >> /etc/slurmstart.sh
else
   read -p "请输入控制节点名称:" serverName
   read -p "请输入控制节点IP:" serverIP
   declare -a computeName
   declare -i computeNumber
   echo "$serverIP	$serverName">> /etc/hosts
   read -p "请输入计算节点数量:" computeNumber
   for (( i=0; i<$computeNumber; i=i+1 )); do
        read -p "请输入计算节点名称  IP地址(以空格隔开):" name  IP_node 
        echo "$IP_node		$name" >> /etc/hosts
        computeName[$i]=$name
        echo ${computeName[$i]} 
    done
    for (( i=0; i<$computeNumber; i=i+1 )); do
       echo ${computeName[$i]} ${computeCore[$i]} >> out.txt
    done
#   /etc/init.d/munge start
#   /opt/slurm/sbin/slurmd -c
   apt-get install nfs-common -y
   mkdir -p /home/share
#   read -p "输入挂载NFS服务端IP(192.168.1.?):" server_ip
   mount $serverIP:/home/share /home/share
#   /opt/slurm/sbin/slurmd -c
   echo "#!/bin/bash
#启动munge
/etc/init.d/munge start
#启动控制节点slurm
/opt/slurm/sbin/slurmd -c
" >> /etc/slurmstart.sh
fi
echo "#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

sh /etc/slurmstart.sh
exit 0
" >> /etc/rc.local
   chmod +x /etc/rc.local
   echo "#  SPDX-License-Identifier: LGPL-2.1+
#
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

# This unit gets pulled automatically into multi-user.target by
# systemd-rc-local-generator if /etc/rc.local is executable.
[Unit]
Description=/etc/rc.local Compatibility
Documentation=man:systemd-rc-local-generator(8)
ConditionFileIsExecutable=/etc/rc.local
After=network.target

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no

[Install]  
WantedBy=multi-user.target  
Alias=rc-local.service
" >> /lib/systemd/system/rc.local.service
ln -s /lib/systemd/system/rc.local.service /etc/systemd/system/
systemctl enable rc-local
#systemctl start rc-local.service
echo "export PATH=/opt/slurm/bin:\$PATH" >> /etc/profile
echo "source /etc/profile" >>  ~/.bashrc
source ~/.bashrc
echo "等待重启........"
